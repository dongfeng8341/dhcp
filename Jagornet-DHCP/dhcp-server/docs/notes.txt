Testing and production deployment notes:
========================================
* Be sure to configure firewall to allow DHCP traffic to/from server under test
** CentOS - firewalld / iptables
** Windows - Windows firewall

Implementation issues
=====================
* All times should be stored in GMT


Primary
=======
.0 - 0
.1 - 2	// offered
.2 - 3	// leased

Backup
======
.0 - 0	// free
.1 - 


* ips-leased-by-primary *
Primary: (.1) leased to '123': state=3, haPeerState=-1
	update-binding-to-backup-success
		Backup: (.1) leased to '123': state=3, haPeerState=3
		Primary: (.1) leased to '123': state=3, haPeerState=3
Primary: (.2) leased to 'abc': state=3, haPeerState=-1
	update-binding-to-backup-failure
		Primary: (.2) leased to 'abc': : state=3, haPeerState=-1

* primary-failure *

* ip-leased-by-backup *
Backup: (.2) leased to '456': state=3, haPeerState=-1

* primary-revived *
Primary: (.1) leased to '123': state=3, haPeerState=3
Primary: (.2) leased to 'abc': state=3, haPeerState=-1
	request-unsynced-bindings-from-backup
		Backup sends: (.2) leased to '456'
		*** CONFLICT - TODO: (DOCUMENT HOW TO?) HANDLE RESOLUTION! ***
		

* ip-renewed-by-primary *
Primary: (.1) leased to '123'
	update-binding-to-backup-success: state=3, haPeerState=-1
		Backup: (.1) leased to '123': state=3, haPeerState=3
		Primary: (.1) leased to '123': state=3, haPeerState=3

* backup-failure *

* ip-renewed-by-primary *
Primary: (.1) leased to '123': state=3, haPeerState=-1
	update-binding-to-backup-failure
		Primary: (.1) leased to '123': state=3, haPeerState=-1

* backup-revived *

Backup: (.1) leased to '123': state=3, haPeerState=3
Backup: (.2) -1 = conflict?
	request-unsynced-bindings-from-primary
		Primary sends: (.1) leased to '123': state=3, haPeerState=3
		
		
		/*
		 * ORIGINAL LOGIC (not used, see below):
		 *
		 * Possible Primary stored/startup States:
		 * - None (initial HA configuration)
		 * 		move to Init state
		 * - Init
		 * 		if Backup.state=Running (Backup was active)
		 * 			move to SyncingFromBackup state
		 * 		else if Backup.state=Polling (Backup did not take over yet)  
		 * 			move to Running state
		 * 		else if Backup.state=Syncing (Backup was coming online)
		 * 			move to SyncingToBackup or Conflict state?
		 * 		else if Backup.state=None (Backup not online)
		 * 			move to Running state
		 * 		else if Backup.state=Init
		 * 			hmmm...
		 * - SyncingFromBackup
		 * 		restart link sync threads (consider storing state of each link sync?)
		 * 		move to Running state when link sync completes
		 * - SyncingToBackup
		 * 		is this a thing?  how else does Backup get data from Primary?
		 * - Running
		 * 		move to Init state (server was shutdown, restart FSM)
		 * - Conflict
		 * 		hmmm...
		 * 
		 * Possible Backup stored/startup States:
		 * - None (initial HA configuration)
		 * 		move to Init state
		 * - Init
		 * 		if Primary.state=Running (Primary was active)
		 * 			move to SyncingFromPrimary state
		 * 		else if Primary.state=Syncing (Primary was coming online)
		 * 			move to SyncingToPrimary or Conflict state?
		 * 		else if Primary.state=None (Primary not online)
		 * 			move to Polling state (let that logic kick-off move to Running?)
		 * 		else if Primary.state=Init
		 * 			hmmm...
		 * - SyncingFromPrimary
		 * 		restart link sync threads (consider storing state of each link sync?)
		 * 		move to Polling state when link sync completes
		 * - SyncingToPrimary
		 * 		todo: reconcile with SyncingFromPrimary?
		 * - Polling
		 * 		move to Init state (server was shutdown, restart FSM)
		 * - Running
		 * 		move to Init state (server was shutdown, restart FSM)
		 * - Conflict
		 * 		hmmm...
		 */


PRIMARY STARTUP
===============
if BACKUP-NOT-AVAILABLE
	then PRIMARY-RUNNING
else
	then BACKUP-AVAILABLE
		do SYNC-FROM-BACKUP

PRIMARY RUNNING
===============
give out leases
if BACKUP-AVAILABLE
	then send updates to backup

if receive anything from backup (BACKUP-POLLING, SYNC-FROM-PRIMARY)
	then BACKUP-AVAILABLE

SYNC FROM BACKUP
================
//give out leases if link-sync OK
//send updates to backup
do not give out leases
for each link
	get stream of unsynced leases
		update lease synced status
		return lease synced status
PRIMARY-RUNNING



BACKUP STARTUP
==============
if PRIMARY-NOT-AVAILABLE
	then BACKUP-POLLING
else
	then PRIMARY-AVAILABLE
		do SYNC-FROM-PRIMARY
	
BACKUP POLLING
==============
do not give out leases
if timeout
	if timeouts exceeded
		then BACKUP-RUNNING
	else
		timeouts++
else
	timeouts = 0
	
BACKUP RUNNING
==============
give out leases

if receive anything from primary (SYNC-FROM-BACKUP)
	then BACKUP-POLLING
or
	consider POLLING while running?

SYNC FROM PRIMARY
=================
do not give out leases
for each link
	get stream of unsynced leases
		update lease synced status
		return lease synced status
BACKUP-POLLING
